services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: locator-backend
    ports:
      - "8080:8080"
    depends_on:
      - db
      - rabbitmq
    volumes:
      - qr_codes:/app/static/qrcode
      - ./backend/logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/healthz || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      default:
        aliases:
          - backend
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: locator_db
      DB_USER: locator_user
      DB_PASSWORD: 1Y8OEqzBLg
      DB_SSLMODE: disable

      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASS: guest

      DEFAULT_ADMIN_NAME: admin
      DEFAULT_ADMIN_API_KEY: rg42if20fh2s

      BASE_URL: http://localhost:8080

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: locator-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    restart: unless-stopped

  db:
    image: postgres:13-alpine
    container_name: locator-db
    ports:
      - "0.0.0.0:5433:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=locator_user
      - POSTGRES_PASSWORD=1Y8OEqzBLg
      - POSTGRES_DB=locator_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U locator_user -d locator_db"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management
    container_name: locator-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: unless-stopped
    networks:
      default:
        aliases:
          - locator-rabbitmq

volumes:
  db_data:
  qr_codes: