version: "3.8"
services:
  backend:
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/healthz || exit 1" ]
      interval: 30s
      timeout: 5s
      retries: 3
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: locator-backend
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=admin
      - DB_NAME=locator_db
      - DB_PASSWORD=admin
      - DB_SSLMODE=disable
      - DEFAULT_ADMIN_NAME=admin
      - DEFAULT_ADMIN_API_KEY=rg42if20fh2s
      - BASE_URL=http://localhost:8080
    depends_on:
      - db
    networks:
      default:
        aliases:
          - backend
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: locator-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    restart: unless-stopped

  db:
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U locator_user -d locator_db" ]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    image: postgres:13-alpine
    container_name: locator-db
    user: "999:999"
    security_opt:
      - no-new-privileges:true
      - seccomp:./seccomp-profile.json
    cap_drop:
      - ALL
    environment:
      - POSTGRES_USER=locator_user
      - POSTGRES_PASSWORD=1Y8OEqzBLg
      - POSTGRES_DB=locator_db
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - ./backend/migrations:/docker-entrypoint-initdb.d:ro
      - db_data:/var/lib/postgresql/data
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management
    container_name: locator-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672" # для веб-интерфейса
    restart: unless-stopped

volumes:
  db_data: